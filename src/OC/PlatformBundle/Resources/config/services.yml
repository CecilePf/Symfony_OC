services:
#    oc_platform.example:
#        class: OC\PlatformBundle\Example
#        arguments: ["@service_id", "plain_value", "%parameter%"]

# Nom du service :
# Rend celui-ci accessible par $container->get('oc_platform.antispam');
  oc_platform.antispam:
    # class indique au container quelle classe instancier lors d'une demande de service (namespace complet de la classe du service)
    class: OC\PlatformBundle\Antispam\OCAntispam
    arguments:
      - "@mailer"
      - %locale%
      - 50
    # Les arguments peuvent être :
    #   Des valeurs normales en YAML (des booléens, des chaînes de caractères, des nombres, etc.) ;
    #   Des paramètres (définis dans le parameters.yml par exemple) : l'identifiant du paramètre est encadré de signes « % » :%nomDuParametre%;
    #   Des services : l'identifiant du service est précédé d'une arobase :@nomDuService.

  oc_platform.email.application_mailer:
    class: OC\PlatformBundle\Email\ApplicationMailer
    arguments:
      - "@mailer"

  # oc_platform.doctrine_listener.application_creation:
  #   class: OC\PlatformBundle\DoctrineListener\ApplicationCreationListener
  #   arguments:
  #     - "@oc_platform.email.application_mailer"
  #   tags:
  #     - { name: doctrine.event_listener, event: postPersist }


# Définition de variables :
# parameters :
  # variable : valeur
# On y accède : $container->getParameter('nomParametre');